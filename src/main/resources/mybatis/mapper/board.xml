<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.couple.back.mybatis.BoardMapper">


	<select id="selectBoardDatas" parameterType="map" resultType="com.couple.back.dto.BoardDetail" >
	    SELECT
            b.board_id as "boardId",
            b.category,
            b.title,
            b.create_date_time as "createDateTime",
			b.create_user_id as "createUserId", 
			b.update_date_time as "updateDateTime",
			b.update_user_id as "updateUserId",
            u.name as "author"
            <!-- <if test="includeClobDataYn != null and includeClobDataYn == 'Y'">
                ,b.content
            </if> -->
        FROM board b
        INNER JOIN users u
        ON b.create_user_id = u.user_id
        <where>
            <if test="searchWord != null and searchWord != ''">
            	<choose>
                    <when  test="searchType == 'title'">
                        AND UPPER(b.title) LIKE UPPER('%' || #{searchWord} || '%')
                    </when>
                    <when  test="searchType == 'category'">
                        AND UPPER(b.category) LIKE UPPER('%' || #{searchWord} || '%')
                    </when>
                    <when  test="searchType == 'author'">
                        AND UPPER(u.name) LIKE UPPER('%' || #{searchWord} || '%')
                    </when>
                </choose>
            </if>
        </where>
        ORDER BY b.create_date_time DESC
        LIMIT #{limit} OFFSET #{offset}
	</select>

    
    <select id="totalBoardCount" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM board b
        INNER JOIN users u
        ON b.create_user_id = u.user_id
        <where>
            <if test="searchWord != null and searchWord != ''">
            	<choose>
                    <when  test="searchType == 'title'">
                        AND UPPER(b.title) LIKE UPPER('%' || #{searchWord} || '%')
                    </when>
                    <when  test="searchType == 'category'">
                        AND UPPER(b.category) LIKE UPPER('%' || #{searchWord} || '%')
                    </when>
                    <when  test="searchType == 'author'">
                        AND UPPER(u.name) LIKE UPPER('%' || #{searchWord} || '%')
                    </when>
                </choose>
            </if>
        </where>
    </select>

    <select id="selectBoardData" parameterType="long" resultType="com.couple.back.dto.BoardDetail" >
	    SELECT
            b.board_id as "boardId",
            b.category,
            b.title,
            b.create_date_time as "createDateTime",
            b.content,
            u.name as "author"
        FROM board b
        INNER JOIN users u
        ON b.create_user_id = u.user_id
        WHERE b.board_id = #{boardId}
	</select>

    <select id="selectCommentDatas" parameterType="map" resultType="com.couple.back.dto.BoardCommentDetail" >
	    WITH RECURSIVE commentHierarchy AS (
            SELECT 
                comment_id,
                board_id,
                parent_id,
                content,
                create_date_time,
                create_user_id,
                ARRAY[comment_id] AS path,
                comment_id AS root_comment_id,
                -1::bigInt AS "parent_create_user_id"
            FROM board_comment
            WHERE board_id = #{boardId} 
            AND parent_id IS NULL

            UNION ALL

            SELECT 
                c.comment_id,
                c.board_id,
                c.parent_id,
                c.content,
                c.create_date_time,
                c.create_user_id,
                ch.path || c.comment_id AS path,
                ch.root_comment_id,
                ch.create_user_id AS "parent_create_user_id"
            FROM board_comment c
            INNER JOIN commentHierarchy ch
            ON c.parent_id = ch.comment_id
        )
        
        SELECT 
            c.comment_id as "commentId",
            c.board_id as "boardId",
            c.parent_id as "parentId",
            c.content as "content",
            c.create_date_time "createDateTime",
            u.name as "author",
            p.name as "parentAuthor"
        FROM commentHierarchy c
        LEFT OUTER JOIN users u
        ON c.create_user_id = u.user_id
        LEFT OUTER JOIN users p
        ON c.parent_create_user_id = p.user_id
        ORDER BY c.path
        LIMIT #{limit} OFFSET #{offset}
	</select>

    
    <select id="totalCommentCount" parameterType="long" resultType="int">
        SELECT COUNT(*)
        FROM board_comment c
        INNER JOIN users u
        ON c.create_user_id = u.user_id
        WHERE c.board_id = #{boardId}
    </select>

    <insert id="insertBoard" parameterType="com.couple.back.model.Board" useGeneratedKeys="true" keyProperty="boardId" keyColumn="board_id">
        INSERT INTO board(category, title, content, create_user_id, update_user_id)
		VALUES (#{category}, #{title}, #{content}, #{createUserId}, #{updateUserId});
    </insert>

    <update id="updateBoard" parameterType="com.couple.back.model.Board">
		UPDATE board
		SET 
			category = #{category},
            title = #{title},
            content = #{content},
			update_user_id=#{updateUserId},
			update_date_time = now()
		WHERE board_id = #{boardId};
	</update>

    <delete id="deleteBoard" parameterType="Long">
		DELETE FROM board
 		WHERE board_id = #{boardId};
	</delete>

    <insert id="insertComment" parameterType="com.couple.back.model.BoardComment" useGeneratedKeys="true" keyProperty="commentId,createDateTime" keyColumn="comment_id,create_date_time">
        INSERT INTO board_comment(parent_id, content, board_id, create_user_id, update_user_id)
		VALUES (#{parentId}, #{content}, #{boardId}, #{createUserId}, #{updateUserId});
    </insert>

    <update id="updateComment" parameterType="com.couple.back.model.BoardComment">
		UPDATE board_comment
		SET 
            content = #{content},
			update_user_id=#{updateUserId},
			update_date_time = now()
		WHERE comment_id = #{commentId};
	</update>

    <delete id="deleteComment" parameterType="Long">
		DELETE FROM board_comment
 		WHERE comment_id = #{commentId};
	</delete>

    <delete id="deleteCommentByBoarId" parameterType="Long">
		DELETE FROM board_comment
 		WHERE board_id = #{boardId};
	</delete>

</mapper>